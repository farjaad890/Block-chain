{"ast":null,"code":"/**\n * A function for converting hex <-> dec w/o loss of precision.\n *\n * The problem is that parseInt(\"0x12345...\") isn't precise enough to convert\n * 64-bit integers correctly.\n *\n * Internally, this uses arrays to encode decimal digits starting with the least\n * significant:\n * 8 = [8]\n * 16 = [6, 1]\n * 1024 = [4, 2, 0, 1]\n *\n * Source: http://www.danvk.org/hex2dec.html\n */\n\n// Adds two arrays for the given base (10 or 16), returning the result.\n// This turns out to be the only \"primitive\" operation we need.\nfunction add(x, y, base) {\n  var z = [];\n  var n = Math.max(x.length, y.length);\n  var carry = 0;\n  var i = 0;\n  while (i < n || carry) {\n    var xi = i < x.length ? x[i] : 0;\n    var yi = i < y.length ? y[i] : 0;\n    var zi = carry + xi + yi;\n    z.push(zi % base);\n    carry = Math.floor(zi / base);\n    i++;\n  }\n  return z;\n}\n\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\n// JavaScript number. base is the number base of the array x.\nfunction multiplyByNumber(num, x, base) {\n  if (num < 0) return null;\n  if (num == 0) return [];\n  var result = [];\n  var power = x;\n  while (true) {\n    if (num & 1) {\n      result = add(result, power, base);\n    }\n    num = num >> 1;\n    if (num === 0) break;\n    power = add(power, power, base);\n  }\n  return result;\n}\nfunction parseToDigitsArray(str, base) {\n  var digits = str.split('');\n  var ary = [];\n  for (var i = digits.length - 1; i >= 0; i--) {\n    var n = parseInt(digits[i], base);\n    if (isNaN(n)) return null;\n    ary.push(n);\n  }\n  return ary;\n}\nfunction convertBase(str, fromBase, toBase) {\n  var digits = parseToDigitsArray(str, fromBase);\n  if (digits === null) return null;\n  var outArray = [];\n  var power = [1];\n  for (var i = 0; i < digits.length; i++) {\n    // invariant: at this point, fromBase^i = power\n    if (digits[i]) {\n      outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);\n    }\n    power = multiplyByNumber(fromBase, power, toBase);\n  }\n  var out = '';\n  for (var i = outArray.length - 1; i >= 0; i--) {\n    out += outArray[i].toString(toBase);\n  }\n  if (out === '') {\n    out = '0';\n  }\n  return out;\n}\nfunction decToHex(decStr, opts) {\n  var hidePrefix = opts && opts.prefix === false;\n  var hex = convertBase(decStr, 10, 16);\n  return hex ? hidePrefix ? hex : '0x' + hex : null;\n}\nfunction hexToDec(hexStr) {\n  if (hexStr.substring(0, 2) === '0x') hexStr = hexStr.substring(2);\n  hexStr = hexStr.toLowerCase();\n  return convertBase(hexStr, 16, 10);\n}\nmodule.exports = {\n  hexToDec: hexToDec,\n  decToHex: decToHex\n};","map":{"version":3,"names":["add","x","y","base","z","n","Math","max","length","carry","i","xi","yi","zi","push","floor","multiplyByNumber","num","result","power","parseToDigitsArray","str","digits","split","ary","parseInt","isNaN","convertBase","fromBase","toBase","outArray","out","toString","decToHex","decStr","opts","hidePrefix","prefix","hex","hexToDec","hexStr","substring","toLowerCase","module","exports"],"sources":["/home/farjaad/Desktop/blockchain/metamask integration/metamask-integration/node_modules/hex2dec/index.js"],"sourcesContent":["/**\n * A function for converting hex <-> dec w/o loss of precision.\n *\n * The problem is that parseInt(\"0x12345...\") isn't precise enough to convert\n * 64-bit integers correctly.\n *\n * Internally, this uses arrays to encode decimal digits starting with the least\n * significant:\n * 8 = [8]\n * 16 = [6, 1]\n * 1024 = [4, 2, 0, 1]\n *\n * Source: http://www.danvk.org/hex2dec.html\n */\n\n// Adds two arrays for the given base (10 or 16), returning the result.\n// This turns out to be the only \"primitive\" operation we need.\nfunction add(x, y, base) {\n  var z = [];\n  var n = Math.max(x.length, y.length);\n  var carry = 0;\n  var i = 0;\n  while (i < n || carry) {\n    var xi = i < x.length ? x[i] : 0;\n    var yi = i < y.length ? y[i] : 0;\n    var zi = carry + xi + yi;\n    z.push(zi % base);\n    carry = Math.floor(zi / base);\n    i++;\n  }\n  return z;\n}\n\n// Returns a*x, where x is an array of decimal digits and a is an ordinary\n// JavaScript number. base is the number base of the array x.\nfunction multiplyByNumber(num, x, base) {\n  if (num < 0) return null;\n  if (num == 0) return [];\n\n  var result = [];\n  var power = x;\n  while (true) {\n    if (num & 1) {\n      result = add(result, power, base);\n    }\n    num = num >> 1;\n    if (num === 0) break;\n    power = add(power, power, base);\n  }\n\n  return result;\n}\n\nfunction parseToDigitsArray(str, base) {\n  var digits = str.split('');\n  var ary = [];\n  for (var i = digits.length - 1; i >= 0; i--) {\n    var n = parseInt(digits[i], base);\n    if (isNaN(n)) return null;\n    ary.push(n);\n  }\n  return ary;\n}\n\nfunction convertBase(str, fromBase, toBase) {\n  var digits = parseToDigitsArray(str, fromBase);\n  if (digits === null) return null;\n\n  var outArray = [];\n  var power = [1];\n  for (var i = 0; i < digits.length; i++) {\n    // invariant: at this point, fromBase^i = power\n    if (digits[i]) {\n      outArray = add(outArray, multiplyByNumber(digits[i], power, toBase), toBase);\n    }\n    power = multiplyByNumber(fromBase, power, toBase);\n  }\n\n  var out = '';\n  for (var i = outArray.length - 1; i >= 0; i--) {\n    out += outArray[i].toString(toBase);\n  }\n  if (out === '') {\n    out = '0';\n  }\n  return out;\n}\n\nfunction decToHex(decStr, opts) {\n  var hidePrefix = opts && opts.prefix === false;\n  var hex = convertBase(decStr, 10, 16);\n  return hex ? (hidePrefix ? hex : '0x' + hex) : null;\n}\n\nfunction hexToDec(hexStr) {\n  if (hexStr.substring(0, 2) === '0x') hexStr = hexStr.substring(2);\n  hexStr = hexStr.toLowerCase();\n  return convertBase(hexStr, 16, 10);\n}\n\nmodule.exports = {\n  hexToDec: hexToDec,\n  decToHex: decToHex\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}