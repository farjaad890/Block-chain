{"ast":null,"code":"\"use strict\";\n\n/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = void 0;\nconst index_js_1 = require(\"../transaction/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst plugins_network_js_1 = require(\"./plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nclass Network {\n  #name;\n  #chainId;\n  #plugins;\n  /**\n   *  Creates a new **Network** for %%name%% and %%chainId%%.\n   */\n  constructor(name, chainId) {\n    this.#name = name;\n    this.#chainId = (0, index_js_2.getBigInt)(chainId);\n    this.#plugins = new Map();\n  }\n  /**\n   *  Returns a JSON-compatible representation of a Network.\n   */\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: String(this.chainId)\n    };\n  }\n  /**\n   *  The network common name.\n   *\n   *  This is the canonical name, as networks migh have multiple\n   *  names.\n   */\n  get name() {\n    return this.#name;\n  }\n  set name(value) {\n    this.#name = value;\n  }\n  /**\n   *  The network chain ID.\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = (0, index_js_2.getBigInt)(value, \"chainId\");\n  }\n  /**\n   *  Returns true if %%other%% matches this network. Any chain ID\n   *  must match, and if no chain ID is present, the name must match.\n   *\n   *  This method does not currently check for additional properties,\n   *  such as ENS address or plug-in compatibility.\n   */\n  matches(other) {\n    if (other == null) {\n      return false;\n    }\n    if (typeof other === \"string\") {\n      try {\n        return this.chainId === (0, index_js_2.getBigInt)(other);\n      } catch (error) {}\n      return this.name === other;\n    }\n    if (typeof other === \"number\" || typeof other === \"bigint\") {\n      try {\n        return this.chainId === (0, index_js_2.getBigInt)(other);\n      } catch (error) {}\n      return false;\n    }\n    if (typeof other === \"object\") {\n      if (other.chainId != null) {\n        try {\n          return this.chainId === (0, index_js_2.getBigInt)(other.chainId);\n        } catch (error) {}\n        return false;\n      }\n      if (other.name != null) {\n        return this.name === other.name;\n      }\n      return false;\n    }\n    return false;\n  }\n  /**\n   *  Returns the list of plugins currently attached to this Network.\n   */\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  /**\n   *  Attach a new %%plugin%% to this Network. The network name\n   *  must be unique, excluding any fragment.\n   */\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.clone());\n    return this;\n  }\n  /**\n   *  Return the plugin, if any, matching %%name%% exactly. Plugins\n   *  with fragments will not be returned unless %%name%% includes\n   *  a fragment.\n   */\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  /**\n   *  Gets a list of all plugins that match %%name%%, with otr without\n   *  a fragment.\n   */\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  /**\n   *  Create a copy of this Network.\n   */\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  /**\n   *  Compute the intrinsic gas required for a transaction.\n   *\n   *  A GasCostPlugin can be attached to override the default\n   *  values.\n   */\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new plugins_network_js_1.GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = (0, index_js_1.accessListify)(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      (0, index_js_2.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\nexports.Network = Network;\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"sepolia\", 11155111, {});\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"names":["index_js_1","require","index_js_2","plugins_network_js_1","Networks","Map","Network","name","chainId","plugins","constructor","getBigInt","toJSON","String","value","matches","other","error","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","GasCostPlugin","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","accessListify","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","assertArgument","custom","ensAddress","ensNetwork","EnsPlugin","register","nameOrChainId","existing","JSON","stringify","exports","injected","registerEth","options","func","priorityFee","altNames","etherscan","url"],"sources":["/home/farjaad/Desktop/blockchain/metamask integration/metamask-integration/node_modules/ethers/src.ts/providers/network.ts"],"sourcesContent":["/**\n *  A **Network** encapsulates the various properties required to\n *  interact with a specific chain.\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\n\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n//import { EtherscanPlugin } from \"./provider-etherscan-base.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n\n/**\n *  A **Network** provides access to a chain's properties and allows\n *  for plug-ins to extend functionality.\n */\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    /**\n     *  Creates a new **Network** for %%name%% and %%chainId%%.\n     */\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    /**\n     *  Returns a JSON-compatible representation of a Network.\n     */\n    toJSON(): any {\n        return { name: this.name, chainId: String(this.chainId) };\n    }\n\n    /**\n     *  The network common name.\n     *\n     *  This is the canonical name, as networks migh have multiple\n     *  names.\n     */\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    /**\n     *  The network chain ID.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    /**\n     *  Returns true if %%other%% matches this network. Any chain ID\n     *  must match, and if no chain ID is present, the name must match.\n     *\n     *  This method does not currently check for additional properties,\n     *  such as ENS address or plug-in compatibility.\n     */\n    matches(other: Networkish): boolean {\n        if (other == null) { return false; }\n\n        if (typeof(other) === \"string\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return (this.name === other);\n        }\n\n        if (typeof(other) === \"number\" || typeof(other) === \"bigint\") {\n            try {\n                return (this.chainId === getBigInt(other));\n            } catch (error) { }\n            return false;\n        }\n\n        if (typeof(other) === \"object\") {\n            if (other.chainId != null) {\n                try {\n                    return (this.chainId === getBigInt(other.chainId));\n                } catch (error) { }\n                return false;\n            }\n            if (other.name != null) {\n                return (this.name === other.name);\n            }\n            return false;\n        }\n\n        return false;\n    }\n\n    /**\n     *  Returns the list of plugins currently attached to this Network.\n     */\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    /**\n     *  Attach a new %%plugin%% to this Network. The network name\n     *  must be unique, excluding any fragment.\n     */\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    /**\n     *  Return the plugin, if any, matching %%name%% exactly. Plugins\n     *  with fragments will not be returned unless %%name%% includes\n     *  a fragment.\n     */\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    /**\n     *  Gets a list of all plugins that match %%name%%, with otr without\n     *  a fragment.\n     */\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    /**\n     *  Create a copy of this Network.\n     */\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    /**\n     *  Compute the intrinsic gas required for a transaction.\n     *\n     *  A GasCostPlugin can be attached to override the default\n     *  values.\n     */\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    priorityFee?: number\n    altNames?: Array<string>;\n    etherscan?: { url: string };\n};\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            if (options.priorityFee) {\n//                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n            }\n/*\n            if (options.etherscan) {\n                const { url, apiKey } = options.etherscan;\n                network.attachPlugin(new EtherscanPlugin(url, apiKey));\n            }\n*/\n            network.attachPlugin(new GasCostPlugin());\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n    registerEth(\"sepolia\", 11155111, { });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"optimism-goerli\", 420, {\n        etherscan: { url: \"https:/\\/api-goerli-optimistic.etherscan.io/\" }\n    });\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api.arbiscan.io/\" }\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {\n        etherscan: { url: \"https:/\\/api-goerli.arbiscan.io/\" }\n    });\n\n    // Polygon has a 35 gwei maxPriorityFee requirement\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api.polygonscan.com/\"\n        }\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api-testnet.polygonscan.com/\"\n        }\n    });\n\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1,\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api.bscscan.com\"\n        }\n    });\n    registerEth(\"bnbt\", 97, {\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api-testnet.bscscan.com\"\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}